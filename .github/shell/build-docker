#!/bin/bash
# Docker Image Builder
# Author: Jevon Wang <cnily03@outlook.com>

PLATFORM="" # empty to use host platform, example: linux/arm64, linux/amd64
IMAGE_NAME="openwrt"
IMAGE_TAG="{{target.arch}}"
OUTPUT_BASENAME="{{info.image.name}}_{{info.image.tag}}"
OUTPUT_EXTENSION="tar"
OUTPUT_FILENAME="docker_${OUTPUT_BASENAME}.${OUTPUT_EXTENSION}"
SALT="SALT-DOCKER-230909"

hash=$(echo "$(date +%s%N).$SALT" | md5sum | sed 's/[^0-9a-zA-Z]//g' | cut -c 1-8)
TMP_FILE_PATH="/tmp/${OUTPUT_BASENAME}_build-${hash}.${OUTPUT_EXTENSION}"

# check if support sudo
_SUDO="sudo"
$_SUDO -n true > /dev/null 2>&1
[ $? -ne 0 ] && _SUDO=""
$_SUDO echo > /dev/null 2>&1
[ $? -ne 0 ] && exit 1

# Utilities
function resolve_path() {
    local path="$1"
    [ -z "$path" ] && return 1
    if [[ ! "$path" =~ ^[/|\.|~] ]]; then
        local path="./$path"
    fi
    function _filepath() {
        local ori_path="$(pwd)" && \
        echo "$(mkdir -p "$(dirname "$path")" && cd "$(dirname "$path")" && pwd)/$(basename "$path")" && \
        cd "$ori_path"
    }
    function _dirpath() {
        local ori_path="$(pwd)" && \
        echo "$(mkdir -p "$path" && cd "$path" && pwd)/" && \
        cd "$ori_path"
    }
    # if [ -d "$path" ]; then
    #     _dirpath
    # elif [ -f "$path" ]; then
    #     _filepath
    # else
        if [[ "$path" =~ /$ ]]; then
            _dirpath
        else
            _filepath
        fi
    # fi
}
function echo_color_code() {
    local num="$1"
    shift
    local opt_n=""
    local opt_e=""
    local bold="0"
    while [[ "$1" =~ ^-.+ ]]; do
        case "$1" in
            -n)
                local opt_n="$1"
                ;;
            -e)
                local opt_e="$1"
                ;;
            -b) #bold
                local bold="1"
                ;;
            *)
                break
                ;;
        esac
        shift
    done
    local msg="$@"
    echo -e -n "\033[${bold};${num}m" && echo $opt_e -n "$msg" && echo -e $opt_n "\033[0m"
}
alias echo_blue="echo_color_code 34"
alias echo_green="echo_color_code 32"
alias echo_red="echo_color_code 31"
alias echo_yellow="echo_color_code 33"
ori_shopt_status_expand_aliases="$(shopt expand_aliases | awk '{print $2}')"
function recover_shopt() {
    if [ "$ori_shopt_status_expand_aliases" = "on" ]; then shopt -s expand_aliases > /dev/null 2>&1
    else shopt -u expand_aliases > /dev/null 2>&1
    fi
}
trap 'recover_shopt' INT TERM
shopt -s expand_aliases > /dev/null 2>&1 # enable alias

# Handle options
function usage() {
    echo "Usage: $0 [options] [docker_directory]"
    echo "Note: Default docker directory is current directory"
    echo "Options:"
    echo "    -y                          Always choose yes when prompting"
    echo "    -o, --output <file>         File path to save the docker image"
    echo "                                (Default) ./docker_<name>_<tag>.tar"
    echo "    -p, --platform <platform>   Target platform"
    echo "                                (Default) `[ $PLATFORM ] && echo $PLATFORM || echo '<system platform>'`"
    echo "    --name <name>               Image name"
    echo "                                (Default) openwrt"
    echo "    --tag <tag>                 Image tag"
    echo "                                (Default) <platform architecure>"
    echo "    --debug                     Show debug message"
    echo "    -h, --help                  Show this help message and exit"
}
OPT_ALWAYS_Y=false
OPT_DEBUG=false
OPT_DOCKER_DIR="."
remaining_args=()
ignored_args=()
function warn_missing_arg() {
    echo_red -n "* Missing argument for option " && echo -n "$1" && echo_red -n ". Run with " && echo_green -n "--help" && echo_red " for more information"
}
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h | \
        --help)
            usage
            shift && exit 0
            ;;
        -y)
            OPT_ALWAYS_Y=true
            shift
            ;;
        -o | \
        --output)
            shift
            [ -z $1 ] || [[ $1 =~ ^-.+ ]] && warn_missing_arg "$key" && exit 1
            OUTPUT_FILENAME="$1"
            shift
            ;;
        -p | \
        --platform)
            shift
            [ -z $1 ] || [[ $1 =~ ^-.+ ]] && warn_missing_arg "$key" && exit 1
            PLATFORM="$1"
            shift
            ;;
        --name)
            shift
            [ -z $1 ] || [[ $1 =~ ^-.+ ]] && warn_missing_arg "$key" && exit 1
            IMAGE_NAME="$1"
            shift
            ;;
        --tag)
            shift
            [ -z $1 ] || [[ $1 =~ ^-.+ ]] && warn_missing_arg "$key" && exit 1
            IMAGE_TAG="$1"
            shift
            ;;
        --debug)
            OPT_DEBUG=true
            shift
            ;;
        -* | \
        --*)
            ignored_args+=("$1")
            shift
            ;;
        *)
            remaining_args+=("$1")
            shift
            ;;
    esac
done
set -- "${remaining_args[@]}" # restore parameters
if [ ${#ignored_args[@]} -gt 0 ]; then # ignored_args
    ignored_args_str=""
    for i in "${!ignored_args[@]}"; do
        ignored_args_str+=", ${ignored_args[$i]}"
    done
    echo_yellow -n "Warning: Ignored unkown option$([ ${#ignored_args[@]} -gt 1 ] && echo -n s)"
    echo_yellow -n ": " && echo -n "$ignored_args_str" | cut -c 3- | tr -d '\n'
    echo_yellow -n ". Run with " && echo_green -n "--help" && echo_yellow " for more information"
fi

# Destruct
function remove_tmp_image() {
    [ -n $TMP_IMAGE_ID ] && $_SUDO docker rmi -f $TMP_IMAGE_ID
}

function recover_original_image() {
    [ -n $TMP_MOVED_IMAGE_TAG ] && {
        $_SUDO docker tag ${IMAGE_NAME}:${TMP_MOVED_IMAGE_TAG} ${IMAGE_NAME}:${IMAGE_TAG}
        $_SUDO docker rmi -f ${IMAGE_NAME}:${TMP_MOVED_IMAGE_TAG}
    }
}

function remove_tmp_file() {
    [ -f "$TMP_FILE_PATH" ] && rm -f "$TMP_FILE_PATH"
}

_destruct_out_redirect="> /dev/null 2>&1"
function run_destruct() {
    for cmd in "$@"; do
        [ -n $cmd ] && eval "$cmd $_destruct_out_redirect"
    done
}
function __destructor() {
    # prevent infinite loop
    [ -z $INT_TRY ] && INT_TRY=0
    INT_TRY=$((INT_TRY+1))
    [ $INT_TRY -ge 5 ] && trap - INT TERM && exit 1
    # clean read waiting status
    [ -n $REPLY ] && unset REPLY
    # destruct
    echo
    $OPT_DEBUG && _destruct_out_redirect=""
    $OPT_DEBUG && echo_blue -b "> Restoring environment..."
    run_destruct remove_tmp_image # remove tmp image
    run_destruct recover_original_image # recover oringinal existing image
    run_destruct remove_tmp_file # remove tmp file
    run_destruct recover_shopt # recover shopt

    # reset trap and exit
    trap - INT TERM && exit 1
}
trap '__destructor' INT TERM

# =====> Debug Info
if [ $OPT_DEBUG = true ]; then
    echo -en "\033[1;33m" && echo -n "* " && \
    echo -en "\033[1;36m" && echo -n "Debug Mode [" && \
    echo -en "\033[0;32m" && echo -n "ON" && echo -en "\033[1;36m" && echo -n "]" && echo -e "\033[0m"
fi

# =====> Check
echo_blue -b "> Checking environment"

# check docker command
$OPT_DEBUG && echo "Checking docker command"
_DOCKER_PATH=`whereis docker | awk '{print $2}'`
[ -z "$_DOCKER_PATH" ] && echo_red "* Docker command not found" & exit 1

# check permission
$_SUDO docker version > /dev/null 2>&1
[ $? -ne 0 ] && echo_red "* Permission denied" && exit 1
# print docker version
echo -n "Docker version: "
$_SUDO docker version --format '{{.Client.Version}}'

# Checking image name and tag (wheather containing upper case)
[[ "$IMAGE_NAME" =~ [A-Z] ]] && {
    echo_yellow "Image name should not contain upper case, automatically convert to lower case"
    IMAGE_NAME=`echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]'`
}
[[ "$IMAGE_TAG" =~ [A-Z] ]] && {
    echo_yellow "Image tag should not contain upper case, automatically convert to lower case"
    IMAGE_TAG=`echo "$IMAGE_TAG" | tr '[:upper:]' '[:lower:]'`
}

# environment
env_target_platform=$PLATFORM
[ -z "$PLATFORM" ] && env_target_platform=`$_SUDO docker version --format '{{.Client.Os}}/{{.Client.Arch}}'`
[ `echo "$env_target_platform" | awk -F '/' '{print NF-1}'` -ne 1 ] && echo_red "* Invalid platform \"$PLATFORM\"" && exit 1
env_target_platform_os=`echo "$env_target_platform" | awk -F '/' '{print $1}'`
env_target_platform_arch=`echo "$env_target_platform" | awk -F '/' '{print $2}'`

env_host_platform=`echo "$(uname -s | tr '[:upper:]' '[:lower:]')/$(uname -m)"`
env_host_os=`echo "$(uname -s | tr '[:upper:]' '[:lower:]')"`
env_host_arch=`echo "$(uname -m)"`


# env replacement
env_vars=(IMAGE_NAME IMAGE_TAG OUTPUT_BASENAME OUTPUT_EXTENSION OUTPUT_FILENAME TMP_FILE_PATH)
env_list=(
    "info.image.name" "$IMAGE_NAME"
    "info.image.tag" "$IMAGE_TAG"
    "host.platform" "$env_host_platform"
    "host.os" "$env_host_os"
    "host.arch" "$env_host_arch"
    "target.platform" "$env_target_platform"
    "target.os" "$env_target_platform_os"
    "target.arch" "$env_target_platform_arch"
)
function update_env_value() { # update all the variables in env_vars, replacing {{key}} to env value
    function escape_for_sed() {
        echo "$1" | sed -e 's/[]\/$*.^|[]/\\&/g'
    }
    function replace_env() { # replace a env format to env value in a string
        local str="$1"
        local key=`escape_for_sed "$2"`
        local val=`escape_for_sed "$3"`
        echo "$str" | sed "s/{{ *$key *}}/$val/g"
    }
    for i in "${!env_vars[@]}"; do
        local str_name="${env_vars[$i]}"
        local str_val="${!str_name}"
        local j=0
        while [[ $((j % 2)) -eq 0 && $j -lt ${#env_list[@]} ]]; do
            local env_key="${env_list[$j]}"
            local env_val="${env_list[$((j+1))]}"
            local str_val="$(replace_env "$str_val" "$env_key" "$env_val")"
            local -g "$str_name"="$str_val"
            j=$((j+2))
        done
    done
}
update_env_value

# print info
echo "Command running platform: ${env_host_platform}"
echo "Target platform: ${env_target_platform}"
$OPT_DEBUG && echo "Image name: ${IMAGE_NAME}"
$OPT_DEBUG && echo "Image tag: ${IMAGE_TAG}"
$OPT_DEBUG && echo "Output file name: ${OUTPUT_FILENAME}"
$OPT_DEBUG && echo "Temp file path: ${TMP_FILE_PATH}"
$OPT_DEBUG && echo "Docker directory: ${OPT_DOCKER_DIR}"

# check if image already exists
exist_output=`$_SUDO docker images -f "reference=${IMAGE_NAME}:${IMAGE_TAG}"`
if [ `echo -e "$exist_output" | wc -l` -gt "1" ]; then
    exist_image_id=`echo -e "$exist_output" | tail -n 1 | awk '{print $3}'`
    TMP_MOVED_IMAGE_TAG="${IMAGE_TAG}-ori_$hash"
    echo "Image ${IMAGE_NAME}:${IMAGE_TAG} already exists ($exist_image_id), temporary renaming it to ${IMAGE_NAME}:${TMP_MOVED_IMAGE_TAG}"
    $_SUDO docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:${TMP_MOVED_IMAGE_TAG}
    [ $? -ne 0 ] && echo_red "* Failed to rename image" && exit 1 # check
    $_SUDO docker rmi -f ${IMAGE_NAME}:${IMAGE_TAG}
fi

echo "Checking done"

# =====> Build
echo_blue -b -n "> Building docker image ("
echo_green -b -n "$env_target_platform"
[ -z "$PLATFORM" ] && echo_yellow -b -n " [default]"
echo_blue -b ")"

_BUILDXX="docker buildx build"
[ -z "$PLATFORM" ] && _BUILDXX="docker build"
_BUILD_ARGS="-t ${IMAGE_NAME}:${IMAGE_TAG}"
[ -n "$PLATFORM" ] && _BUILD_ARGS+=" --platform ${PLATFORM}"
$_SUDO $_BUILDXX $_BUILD_ARGS "${OPT_DOCKER_DIR}"

TMP_IMAGE_ID=`$_SUDO docker images -f "reference=${IMAGE_NAME}:${IMAGE_TAG}" | tail -n 1 | awk '{print $3}'`
[[ $? -ne 0 || -z "${TMP_IMAGE_ID}" ]] && echo_red "* Failed to get image id" && { run_destruct recover_original_image; exit 1; } # check

# =====> Save
echo_blue -b -n "> Exporting docker image "
echo_green -b -n "${IMAGE_NAME}:${IMAGE_TAG}"
echo_blue -b -n " (" && echo_green -b -n "${TMP_IMAGE_ID}" && echo_blue -b ")"

$_SUDO docker save ${IMAGE_NAME}:${IMAGE_TAG} > "$TMP_FILE_PATH"

[[ $? -ne 0 || ! -f "$TMP_FILE_PATH" ]] && echo_red "* Failed to export docker image" && {
    run_destruct remove_tmp_image recover_original_image
    exit 1
} # check
FILE_NAME="$OUTPUT_FILENAME"
if [ -f "$FILE_NAME" ]; then # check if overwrite
    FILE_NAME="$(resolve_path "$FILE_NAME")"
    checked=false
    overwrite_prompt="File \"$FILE_NAME\" already exists, overwrite? [Y/n] "
    while [ $checked = false ]; do
        if [ $OPT_ALWAYS_Y = true ]; then
            echo "File \"$FILE_NAME\" already exists, overwrite automatically"
            REPLY="y"
        else
            echo_yellow -n "$overwrite_prompt"
            read -t 0.1 -n 10000 discard || true # clear stdin
            read -n 1 -r REPLY
            [ -n "$REPLY" ] && echo
        fi
        if [[ "$REPLY" =~ ^[Yn\r\n]?$ ]]; then # overwrite
            rm -f "$FILE_NAME"
            echo "Overwriting \"$FILE_NAME\""
            checked=true
        elif [[ "$REPLY" =~ ^[Nn]$ ]]; then # not overwrite
            echo_yellow -n "Enter new file name: "
            read -t 0.1 -n 10000 discard || true # clear stdin
            read -r FILE_NAME
            [[ ! "$FILE_NAME" =~ \.tar$ ]] && FILE_NAME="${FILE_NAME}.tar"
            [ ! -f "$FILE_NAME" ] && rm -f "$FILE_NAME"
            echo "Using custom file name \"$FILE_NAME\""
            checked=true
            FILE_NAME="$(resolve_path "$FILE_NAME")"
        else
            overwrite_prompt="Invalid input, overwrite? [Y/n] "
            unset REPLY
        fi
    done
fi
echo "Saving to file \"$FILE_NAME\""
mkdir -p "$(dirname "$FILE_NAME")"
mv "$TMP_FILE_PATH" "$FILE_NAME"
echo "Done"
echo -n "File is now at " && echo_green "$FILE_NAME"

# =====> Clean
echo_blue -b "> Cleaning environment"

echo "Removing image ${TMP_IMAGE_ID}"
remove_tmp_image && unset TMP_IMAGE_ID # remove tmp image

[ -n $TMP_MOVED_IMAGE_TAG ] && echo "Recovering original existing image" && recover_original_image # recover oringinal existing image

remove_tmp_file # remove tmp file

recover_shopt # recover shopt
